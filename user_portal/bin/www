#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('user_portal:server');
var http = require('http');
var cluster = require('cluster');
var numCPUs = require('os').cpus().length;
var Observer = require('../clusterObeserver');
var UPBackEnd = require('../UPBackEnd');
var io = require('socket.io');

if (cluster.isMaster) {

        gObserver = new Observer(1);
        gObserver.startEventHandler();
       
}
else if (cluster.isWorker) {

        /**
         * Get port from environment and store in Express.
         */

        var port = normalizePort(process.env.PORT || '3002');
        app.set('port', port);

        /**
         * Create HTTP server.
         */

        var server = http.createServer(app);

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);

        //websocket svr
        global.devMntCliList = new Map();
        var socket = io.listen(server);
        socket.on('connection', function(client){ 

                console.log("New client is here!");

                if (global.devMntCliList.has(client.id) == false) {
                    console.log("monitor:"+client.id);
                    global.devMntCliList.set(client.id, client);
                }

                client.on('message', function(msg) { 
                    console.log("client has sent:"+msg); 

                    });

                client.on('disconnect', function(){ 
                    console.log("Client has disconnected");
                    if (global.devMntCliList.has(client.id) == true) {
                        console.log("unmonitor:"+client.id);
                        global.devMntCliList.delete(client.id);
                    }

                    }) ;

                client.on('agentPropReq', function (data) {
                    console.log('gwid:'+data);
                
                    var gwO = new Object();
                    gwO.gwid = data; 
                    var subMsg = {action:'getAgentProp', param:gwO};
                    gBackEnd.sendMsg("dev_controller", subMsg, function(err, msg){
                        console.log('test agentprop:'+JSON.stringify(msg));
                        if (msg.action == 'getAgentProp') {
                            client.emit('agentPropRsp', JSON.stringify(msg.ret));
                        }
                        });
                    });
                });          
        
        gBackEnd = new UPBackEnd(process.pid, 'dealer', '10.172.237.98:2182,10.172.237.98:2183,10.172.237.98:2184', '/pigeon/devctlsvc');
        gBackEnd.start(); 
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
